using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using dotnet_cyberpunk_challenge_2.malware_daemons;
using dotnet_cyberpunk_challenge_2.malware_daemons.lib;

namespace dotnet_cyberpunk_challenge_2
{
    public static class HandleTheMalware
    {
        public static async Task HandleMalwareChallenges() {
            await Challenge1();
            await Challenge2();
            await Challenge3();
            Challenge4();
        }

        private static async Task Challenge1() {
            // Objective: You've been tasked by a hacker cell to build out the beginnings of our IceBreaker Malware to attack Arasaka
            // There's a couple pieces missing though. The Ice Breaker needs to be an instance of our
            // Kuang Grade Eleven malware. See if you build it out and print out some info from it for diagnostics

            /*TODO: hmm something is missing*/ iceBreaker = new /*TODO: Need to make an instance of the Kuang Grade Eleven Malware*/
            
            
            // We need to call a function to get the current Arasaka Connection. 
            // Look around in the iceBreaker's class or it's parent class to see what we can use.
            // *Hint*: Click on the Class for iceBreaker and use F12 to go immediately to that class definition.
            // If the functions on the class don't appear to be helpful then use F12 to view the parent's class as well.
            ArasakaServerConnection connection = await iceBreaker./*TODO: Something is missing. Need to Get the Current Server Connection*/;

            // TODO:
            // Since we've got the ArasakaServerConnection we want to print out all the properties on it:
            // - ConnectionId
            // - DestinationAddress
            // - SourceAddress
            // - ProcessId
            // - Content
            // - SecretKey
            Console.WriteLine(connection./*TODO*/);
        }

        private static async Task Challenge2 () {
            // Objective: Now that we know how to build the Kuang Grade Eleven and establish a connection
            // to Arasaka we need to build a secure tunnel to the Server.
            // You'll need to build another Kuang Grade Eleven and use one of it's built in functions
            // to establish a secure tunnel.


            /*TODO: Missing something...*/ iceBreaker = new /*TODO: Missing something...*/;


            // You'll need to look at the class of your iceBreaker by using F12 and look at it's public functions.
            // NOTE: You will notice that one of those functions DOESN'T have a name.
            // TODO: You will need to look at what KuangGradeElevenMalware's base class and find the abstract method listed
            // that is missing from  KuangGradeElevenMalware and fill in the name of that method.
            // The method should allow us to Setup a Tunnel To The Target.
            // You'll want to use that function here:
            IceBreakerTunnelConnection await iceBreaker./*TODO: Hmm...what function to us??*/;

            // We need to print out the following properties to ensure our tunnel is setup properly:
            //     - Connection ID
            //     - Desitnation Address
            //     - Source Address
            //     - ProcessId
            //     - IsEncrypted
            //     - TunnelEncryption (this might be tricky because it's an enum :) )
            Console.WriteLine(iceBreaker.CurrentIceBreakerTunnelConnection./*TODO: something is missing*/);
        }

        private static void Challenge3() {
            // Objective: We know what GetIceTypeOnRemote() is going to return to us and we know what it's gonna be overridden
            // but now we actually need to go implement how it works. Another operator has given you some basic code but you'll
            // need to write the logic of detecting the ICE model that we're dealing with.
            
            // TODO: This function doesn't do anything so go to the Kuang Grade Eleven and do some work there.
        }

        private static async Task Challenge4 () {
            // Objective: In order for us to break the ICE later we need to know a couple things about it first!
            // One of those things is obviously going to be...what type of ICE are we dealing with?
            // There should be a function in the Kuang Grade Eleven class that we can use to get the model type.

            // Guess what? Gotta make another ice breaker, but this time from scratch :)
            /*TODO: Put your iceBreaker instantiation here. MAKE SURE to call it iceBreaker just like above*/

            // We need to call a function that will Get the Type of ICE on the Remote host.
            // See if you can check out the Kuang class and find a public function that'll do that for us
            ArasakaMessageResponse iceTypeMessage = await iceBreaker./*TODO: What function goes here?*/
            // TODO: Hint. Make sure you've Got an Arasak Server Connection before doing more things :)
            
            // TODO: We'll need to actually print out the model type and metadata of the message. Here's the properties print out:
            // These properties are in the iceTypeMessage.content 
            // - accessKey
            // - isAuthenticated
            // - isEncrypted
            // - TTL
            // - message
        
            // These properties are on the iceTypeMessage.metadata
            // - messageId
            // - arasakaServer
            // - netwatchMonitored
            Console.WriteLine(iceTypeMessage.content);
        }
    }
}